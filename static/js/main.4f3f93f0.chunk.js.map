{"version":3,"sources":["api/getAnswers.js","MagicBall.js","App.js","serviceWorker.js","index.js"],"names":["instance","require","create","baseURL","timeout","getAnswerFromDB","index","Promise","resolve","reject","get","then","response","data","catch","error","MagicBall","props","state","message","class","prevIndex","getAnswer","bind","generateIndex","Math","floor","random","this","setState","setTimeout","console","log","className","onClick","id","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QAEMA,EAFQC,EAAQ,IAECC,OAAO,CAC5BC,QAAS,2CACTC,QAAS,MAeIC,EAZS,SAAmBC,GACzC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BT,EAASU,IAAT,mBAAyBJ,EAAzB,UACCK,MAAK,SAAUC,GACdJ,EAAQI,EAASC,SAElBC,OAAM,SAAUC,GACfN,EAAOM,UCyDEC,E,YAnEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,QAAS,8DACTC,MAAO,GACPC,UAAW,GAGb,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAVJ,E,6EAgBjB,IAFA,IAAIjB,EAASmB,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GAEzCrB,IAAUsB,KAAKV,MAAMG,WACzBf,EAAQmB,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GAO5C,OAJAC,KAAKC,UAAS,iBAAK,CACjBR,UAAWf,MAGNA,I,kCAGG,IAAD,OACHA,EAAQsB,KAAKJ,gBAEnBnB,EAAgBC,GAAOK,MAAK,SAACC,GAG3BkB,YAAW,WACT,EAAKD,UAAS,iBAAK,CACjBV,QAASP,EACTQ,MAAO,SAER,QAEFN,OAAM,SAACC,GACRgB,QAAQC,IAAIjB,GACZ,EAAKc,UAAS,iBAAK,CACjBV,QAAS,2GACTC,MAAO,UAIXQ,KAAKC,UAAS,iBAAK,CACjBV,QAAS,cACTC,MAAO,c,+BAIF,IAAD,OACJ,OACA,yBAAKa,UAAU,aACX,yBAAKA,UAAWL,KAAKV,MAAME,MAAOc,QAAS,kBAAK,EAAKZ,aAAaa,GAAG,gBACnE,yBAAKA,GAAG,gBACN,uBAAGF,UAAU,UAAUL,KAAKV,MAAMC,gB,GA5DxBiB,IAAMC,WCiBfC,MAjBf,WACE,OACE,yBAAKL,UAAU,OACb,gCACE,0CACA,2FAEF,kBAAC,EAAD,MACA,gCACE,yBAAKA,UAAU,aACb,6DCDUM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.4f3f93f0.chunk.js","sourcesContent":["const axios = require('axios');\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://magic-ball-8b0da.firebaseio.com/',\r\n  timeout: 2000\r\n});\r\n\r\nconst getAnswerFromDB = function getAnswer(index){\r\n  return new Promise((resolve, reject) => {\r\n    instance.get(`/answers/${index}.json`)\r\n    .then(function (response) {\r\n      resolve(response.data);\r\n    })\r\n    .catch(function (error) {\r\n      reject(error);\r\n    })\r\n  })\r\n}\r\n\r\nexport default getAnswerFromDB;\r\n  ","import React from 'react';\r\nimport getAnswerFromDB from './api/getAnswers';\r\n\r\nclass MagicBall extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      message: \"Ask me a \\\"yes or no\\\" question, to know the answer click me.\",\r\n      class: \"\",\r\n      prevIndex: 0\r\n    }\r\n\r\n    this.getAnswer = this.getAnswer.bind(this);\r\n    this.generateIndex = this.generateIndex.bind(this);\r\n  }\r\n\r\n  generateIndex(){\r\n    let index =  Math.floor((Math.random() * 23) + 1);\r\n\r\n    while(index === this.state.prevIndex){\r\n      index = Math.floor((Math.random() * 11) + 1);\r\n    }\r\n\r\n    this.setState(()=>({\r\n      prevIndex: index\r\n    }))\r\n\r\n    return index;\r\n  }\r\n\r\n  getAnswer(){\r\n    const index = this.generateIndex();\r\n    \r\n    getAnswerFromDB(index).then((response) => {\r\n      //this setTimeout is basically here because sometimes I get the answer too fast and the shake effect is interrupted\r\n      //this make it last longer.\r\n      setTimeout(() => {\r\n        this.setState(()=>({\r\n          message: response,\r\n          class: \"\"\r\n        }))\r\n      }, 1000);\r\n      \r\n    }).catch((error)=>{\r\n      console.log(error);\r\n      this.setState(()=>({\r\n        message: \"Seems like my DB is having an existential crisis after this question, try asking again in a few minutes.\",\r\n        class: \"\"\r\n      }))\r\n    });\r\n\r\n    this.setState(()=>({\r\n      message: \"Thinking...\",\r\n      class: \"shake\"\r\n    }))\r\n  }\r\n\r\n  render(){\r\n      return (\r\n      <div className=\"container\">\r\n          <div className={this.state.class} onClick={()=> this.getAnswer()} id=\"externalBall\">\r\n            <div id=\"internalBall\">\r\n              <p className=\"answer\">{this.state.message}</p>\r\n            </div>\r\n          </div>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default MagicBall;","import React from 'react';\nimport MagicBall from './MagicBall';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Magic Ball</h1>\n        <h4>The one and only magic ball that gives you honest answers.</h4>\n      </header>\n      <MagicBall/>\n      <footer>\n        <div className=\"copyright\">\n          <p>Created By Alessia Miccoli</p>    \n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}